{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Equipo","React","lazy","Colabora","Home","Proyecto","Revista","App","Suspense","fallback","basename","path","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCbAC,EAASC,IAAMC,MAAK,kBAAM,gCAC1BC,EAAWF,IAAMC,MAAK,kBAAM,gCAC5BE,EAAOH,IAAMC,MAAK,kBAAM,sDACxBG,EAAWJ,IAAMC,MAAK,kBAAM,gCAC5BI,EAAUL,IAAMC,MAAK,kBAAM,gCACpBD,IAAMC,MAAK,kBAAM,gCAuBfK,MAnBf,WAEE,OACE,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,+BAC1B,6BAEE,kBAAC,IAAD,CAAYC,SAAS,KACrB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWT,IACjC,kBAAC,IAAD,CAAOO,KAAK,UAAUC,OAAK,EAACC,UAAWb,IACvC,kBAAC,IAAD,CAAOW,KAAK,YAAYC,OAAK,EAACC,UAAWV,IACzC,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,OAAK,EAACC,UAAWP,IACxC,kBAAC,IAAD,CAAOK,KAAK,YAAYC,OAAK,EAACC,UAAWR,SCjB/CS,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SFsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e225e1b1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {Route, Switch, BrowserRouter, HashRouter} from 'react-router-dom'\n\n//lazy loading the components\n\nconst Equipo = React.lazy(() => import('./Components/Equipo/Equipo'));\nconst Colabora = React.lazy(() => import('./Components/Colabora/Colabora')); \nconst Home = React.lazy(() => import('./Components/Home/Home'));\nconst Proyecto = React.lazy(() => import('./Components/Proyecto/Proyecto'));\nconst Revista = React.lazy(() => import('./Components/Revista/Revista'))\nconst Menu = React.lazy(() => import('./Components/Menu/Menu'))\n\n// const renderLoader = () => <div className=\"loader\"></div>;\n\nfunction App() {\n  //TODO: en el fallback pots posar algu per si tard√©s a carregar alguna pagina tipus un spinner\n  return (   \n    <React.Suspense fallback={<div></div>}> \n    <div>\n      {/* <Menu/> */}\n      <HashRouter basename=\"/\">\n      <Switch>\n      <Route path=\"/\" exact component={Home}/>\n      <Route path=\"/equipo\" exact component={Equipo}/>\n      <Route path=\"/colabora\" exact component={Colabora}/>\n      <Route path=\"/revista\" exact component={Revista}/>\n      <Route path=\"/proyecto\" exact component={Proyecto}/>\n      </Switch>\n      </HashRouter>\n    </div>\n    </React.Suspense>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n// import {BrowserRouter} from 'react-router-dom'\nimport App from './App'\n// import Avenir from './AvenirNext/ANCondensed.ttc'\n// import './assets/css/fonts.css';\n\nReactDOM.render(\n    <App/>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}